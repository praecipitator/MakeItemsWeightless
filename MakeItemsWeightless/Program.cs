using Mutagen.Bethesda;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Synthesis;

namespace MakeItemsWeightless
{
    public class Program
    {
        static Lazy<WeightSettings> _lazySettings = null!;
        static WeightSettings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _lazySettings)
                .SetTypicalOpen(GameRelease.Fallout4, "ItemsWeightless.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            // alch
            if (Settings.useAlch)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Ingestible().WinningOverrides())
                {
                    try
                    {
                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.Ingestibles.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }

            // ammo
            if (Settings.useAmmo)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Ammunition().WinningOverrides())
                {
                    try
                    {
                        if (item.Flags.HasFlag(Ammunition.Flag.NonPlayable))
                        {
                            continue;
                        }

                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.Ammunitions.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }

            // armo
            if (Settings.useArmo)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Armor().WinningOverrides())
                {
                    try
                    {
                        if (item.MajorFlags.HasFlag(Armor.MajorFlag.NonPlayable))
                        {
                            continue;
                        }

                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.Armors.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }

            // book
            if (Settings.useBook)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Book().WinningOverrides())
                {
                    try
                    {
                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.Books.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }

            // holotape
            if (Settings.useHolotape)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Holotape().WinningOverrides())
                {
                    try
                    {
                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.Holotapes.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }

            // keys
            if (Settings.useKeys)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Key().WinningOverrides())
                {
                    try
                    {
                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.Keys.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }

            // misc
            if (Settings.useMisc)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.MiscItem().WinningOverrides())
                {
                    try
                    {
                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.MiscItems.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }

            // weapon
            if (Settings.useWeap)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Weapon().WinningOverrides())
                {
                    try
                    {
                        if (item.Flags.HasFlag(Weapon.Flag.NotPlayable))
                        {
                            continue;
                        }

                        if (item.Weight > 0)
                        {
                            var newItem = state.PatchMod.Weapons.GetOrAddAsOverride(item);
                            newItem.Weight = 0;
                        }
                    }
                    catch (Exception e)
                    {
                        throw RecordException.Enrich(e, item);
                    }
                }
            }
        }
    }
}

